import io
import os
import hashlib
import bsdiff4
from BaseClasses import MultiWorld, Item
from .Items import item_table


class Rom:
    hash = "4b1a5897d89d9e74ec7f630eefdfd435"

    def __init__(self, path: str, world: MultiWorld, player: int):
        print(os.getcwd())
        with open("Mario & Luigi - Superstar Saga (U).gba", 'rb') as file:
            content = file.read()
        patched = self.apply_delta(content)
        print(len(patched))
        self.path = path
        self.stream = io.BytesIO(patched)
        self.world = world
        self.player = player

    def item_inject(self, location: int, item_type: int, item: Item):
        code = item_table[item.name].itemID
        if item.player != self.player:
            code = 0x3F
        if item_type == 0:
            self.stream.seek(location, 0)
            self.stream.write(bytes([code]))
        elif item_type == 1:
            if code == 0x1D or code == 0x1E:
                code += 0xE
            if 0x20 <= code <= 0x26:
                code -= 0x4
            insert = int(code)
            insert2 = insert % 0x10
            insert2 *= 0x10
            insert //= 0x10
            insert += 0x20
            self.stream.seek(location, 0)
            self.stream.write(bytes([insert, insert2]))
        elif item_type == 2:
            if code == 0x1D or code == 0x1E:
                code += 0xE
            if 0x20 <= code <= 0x26:
                code -= 0x4
            self.stream.seek(location, 0)
            self.stream.write(bytes([code]))
        elif item_type == 3:
            print(item.name)
            if code == 0x1D or code == 0x1E:
                code += 0xE
            if code < 0x1D:
                code -= 0xA
            if 0x20 <= code <= 0x26:
                code -= 0xE
            print(code)
            self.stream.seek(location, 0)
            self.stream.write(bytes([code]))
        else:
            self.stream.seek(location, 0)
            self.stream.write(bytes([0x18]))

    def patch_options(self):
        if self.world.skip_intro[self.player]:
            # Enable Skip Intro in ROM
            self.stream.seek(0x244D08, 0)
            self.stream.write(bytes([0x88, 0x0, 0x19, 0x91, 0x1, 0x20, 0x58, 0x1, 0xF, 0xA0, 0x3, 0x15, 0x27, 0x8]))

        if self.world.castle_start[self.player]:
            # Spawn in castle town in ROM
            self.stream.seek(0x244D08, 0)
            self.stream.write(bytes([0x88, 0x0, 0xD, 0x51, 0x3, 0xA0, 0x68, 0x0, 0xF, 0xA0, 0x41, 0x15, 0x27, 0x8]))

        if self.world.castle_skip[self.player]:
            # Enable Bowser's castle skip in ROM
            self.stream.seek(0x3AEAB0, 0)
            self.stream.write(bytes([0xC1, 0x67, 0x0, 0x6, 0x1C, 0x08, 0x3]))
            self.stream.seek(0x3AEC18, 0)
            self.stream.write(bytes([0x89, 0x65, 0x0, 0xE, 0xA, 0x08, 0x1]))

        if self.world.skip_minecart[self.player]:
            # Enable minecart skip in ROM
            self.stream.seek(0x3AC728, 0)
            self.stream.write(bytes([0x89, 0x13, 0x0, 0x10, 0xF, 0x08, 0x1]))
            self.stream.seek(0x3AC56C, 0)
            self.stream.write(bytes([0x49, 0x16, 0x0, 0x8, 0x8, 0x08, 0x1]))

    def close(self, path):
        print(path)
        with open("C:/Users/james/Downloads/armips-v0.11.0-windows-x86/mlss_ap.gba", 'wb') as output:
            self.stream.seek(0)
            output.write(self.stream.read())


    def apply_delta(self, b: bytes) -> bytes:
        """
        Gets the patched ROM data generated from applying the ap-patch diff file to the provided ROM.
        Diff patch generated by https://github.com/digiholic/bn3-ap-patch
        Which should contain all changed text banks and assembly code
        """
        import pkgutil
        print(len(b))
        patch_bytes = pkgutil.get_data(__name__, "data/basepatch.bsdiff")
        print(len(patch_bytes))
        patched_rom = bsdiff4.patch(b, patch_bytes)
        print(len(patched_rom))
        return patched_rom
